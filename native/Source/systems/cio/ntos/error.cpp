#include "error.hpp"

using namespace cio;

status internal::translate_sys_error(DWORD sys) noexcept {
    if (sys <= 0) return (status) sys;
    switch (sys) {
        case ERROR_NOACCESS:                    return CIO_EACCES;
        case WSAEACCES:                         return CIO_EACCES;
        case ERROR_ELEVATION_REQUIRED:          return CIO_EACCES;
        case ERROR_CANT_ACCESS_FILE:            return CIO_EACCES;
        case ERROR_ADDRESS_ALREADY_ASSOCIATED:  return CIO_EADDRINUSE;
        case WSAEADDRINUSE:                     return CIO_EADDRINUSE;
        case WSAEADDRNOTAVAIL:                  return CIO_EADDRNOTAVAIL;
        case WSAEAFNOSUPPORT:                   return CIO_EAFNOSUPPORT;
        case WSAEWOULDBLOCK:                    return CIO_EAGAIN;
        case WSAEALREADY:                       return CIO_EALREADY;
        case ERROR_INVALID_FLAGS:               return CIO_EBADF;
        case ERROR_INVALID_HANDLE:              return CIO_EBADF;
        case ERROR_LOCK_VIOLATION:              return CIO_EBUSY;
        case ERROR_PIPE_BUSY:                   return CIO_EBUSY;
        case ERROR_SHARING_VIOLATION:           return CIO_EBUSY;
        case ERROR_OPERATION_ABORTED:           return CIO_ECANCELED;
        case WSAEINTR:                          return CIO_ECANCELED;
        case ERROR_NO_UNICODE_TRANSLATION:      return CIO_ECHARSET;
        case ERROR_CONNECTION_ABORTED:          return CIO_ECONNABORTED;
        case WSAECONNABORTED:                   return CIO_ECONNABORTED;
        case ERROR_CONNECTION_REFUSED:          return CIO_ECONNREFUSED;
        case WSAECONNREFUSED:                   return CIO_ECONNREFUSED;
        case ERROR_NETNAME_DELETED:             return CIO_ECONNRESET;
        case WSAECONNRESET:                     return CIO_ECONNRESET;
        case ERROR_ALREADY_EXISTS:              return CIO_EEXIST;
        case ERROR_FILE_EXISTS:                 return CIO_EEXIST;
        case ERROR_BUFFER_OVERFLOW:             return CIO_EFAULT;
        case WSAEFAULT:                         return CIO_EFAULT;
        case ERROR_HOST_UNREACHABLE:            return CIO_EHOSTUNREACH;
        case WSAEHOSTUNREACH:                   return CIO_EHOSTUNREACH;
        case ERROR_INSUFFICIENT_BUFFER:         return CIO_EINVAL;
        case ERROR_INVALID_DATA:                return CIO_EINVAL;
        case ERROR_INVALID_PARAMETER:           return CIO_EINVAL;
        case ERROR_SYMLINK_NOT_SUPPORTED:       return CIO_EINVAL;
        case WSAEINVAL:                         return CIO_EINVAL;
        case WSAEPFNOSUPPORT:                   return CIO_EINVAL;
        case ERROR_BEGINNING_OF_MEDIA:          return CIO_EIO;
        case ERROR_BUS_RESET:                   return CIO_EIO;
        case ERROR_CRC:                         return CIO_EIO;
        case ERROR_DEVICE_DOOR_OPEN:            return CIO_EIO;
        case ERROR_DEVICE_REQUIRES_CLEANING:    return CIO_EIO;
        case ERROR_DISK_CORRUPT:                return CIO_EIO;
        case ERROR_EOM_OVERFLOW:                return CIO_EIO;
        case ERROR_FILEMARK_DETECTED:           return CIO_EIO;
        case ERROR_GEN_FAILURE:                 return CIO_EIO;
        case ERROR_INVALID_BLOCK_LENGTH:        return CIO_EIO;
        case ERROR_IO_DEVICE:                   return CIO_EIO;
        case ERROR_NO_DATA_DETECTED:            return CIO_EIO;
        case ERROR_NO_SIGNAL_SENT:              return CIO_EIO;
        case ERROR_OPEN_FAILED:                 return CIO_EIO;
        case ERROR_SETMARK_DETECTED:            return CIO_EIO;
        case ERROR_SIGNAL_REFUSED:              return CIO_EIO;
        case WSAEISCONN:                        return CIO_EISCONN;
        case ERROR_CANT_RESOLVE_FILENAME:       return CIO_ELOOP;
        case ERROR_TOO_MANY_OPEN_FILES:         return CIO_EMFILE;
        case WSAEMFILE:                         return CIO_EMFILE;
        case WSAEMSGSIZE:                       return CIO_EMSGSIZE;
        case ERROR_FILENAME_EXCED_RANGE:        return CIO_ENAMETOOLONG;
        case ERROR_NETWORK_UNREACHABLE:         return CIO_ENETUNREACH;
        case WSAENETUNREACH:                    return CIO_ENETUNREACH;
        case WSAENOBUFS:                        return CIO_ENOBUFS;
        case ERROR_BAD_PATHNAME:                return CIO_ENOENT;
        case ERROR_DIRECTORY:                   return CIO_ENOENT;
        case ERROR_ENVVAR_NOT_FOUND:            return CIO_ENOENT;
        case ERROR_FILE_NOT_FOUND:              return CIO_ENOENT;
        case ERROR_INVALID_NAME:                return CIO_ENOENT;
        case ERROR_INVALID_DRIVE:               return CIO_ENOENT;
        case ERROR_INVALID_REPARSE_DATA:        return CIO_ENOENT;
        case ERROR_MOD_NOT_FOUND:               return CIO_ENOENT;
        case ERROR_PATH_NOT_FOUND:              return CIO_ENOENT;
        case WSAHOST_NOT_FOUND:                 return CIO_ENOENT;
        case WSANO_DATA:                        return CIO_ENOENT;
        case ERROR_NOT_ENOUGH_MEMORY:           return CIO_ENOMEM;
        case ERROR_OUTOFMEMORY:                 return CIO_ENOMEM;
        case ERROR_CANNOT_MAKE:                 return CIO_ENOSPC;
        case ERROR_DISK_FULL:                   return CIO_ENOSPC;
        case ERROR_EA_TABLE_FULL:               return CIO_ENOSPC;
        case ERROR_END_OF_MEDIA:                return CIO_ENOSPC;
        case ERROR_HANDLE_DISK_FULL:            return CIO_ENOSPC;
        case ERROR_NOT_CONNECTED:               return CIO_ENOTCONN;
        case WSAENOTCONN:                       return CIO_ENOTCONN;
        case ERROR_DIR_NOT_EMPTY:               return CIO_ENOTEMPTY;
        case WSAENOTSOCK:                       return CIO_ENOTSOCK;
        case ERROR_NOT_SUPPORTED:               return CIO_ENOTSUP;
        case ERROR_BROKEN_PIPE:                 return CIO_EOF;
        case ERROR_ACCESS_DENIED:               return CIO_EPERM;
        case ERROR_PRIVILEGE_NOT_HELD:          return CIO_EPERM;
        case ERROR_BAD_PIPE:                    return CIO_EPIPE;
        case ERROR_NO_DATA:                     return CIO_EPIPE;
        case ERROR_PIPE_NOT_CONNECTED:          return CIO_EPIPE;
        case WSAESHUTDOWN:                      return CIO_EPIPE;
        case WSAEPROTONOSUPPORT:                return CIO_EPROTONOSUPPORT;
        case ERROR_WRITE_PROTECT:               return CIO_EROFS;
        case ERROR_SEM_TIMEOUT:                 return CIO_ETIMEDOUT;
        case WSAETIMEDOUT:                      return CIO_ETIMEDOUT;
        case ERROR_NOT_SAME_DEVICE:             return CIO_EXDEV;
        case ERROR_INVALID_FUNCTION:            return CIO_EISDIR;
        case ERROR_META_EXPANSION_TOO_LONG:     return CIO_E2BIG;
        case WSAESOCKTNOSUPPORT:                return CIO_ESOCKTNOSUPPORT;
        default:                                return CIO_UNKNOWN;
    }
}
